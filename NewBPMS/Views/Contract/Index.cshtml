@model ContractIndexViewModel
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Mvc.Core.Common;
@{
    ViewData["Title"] = "合同/项目管理";

    int i = 1;

    var headerMetadata = Model.ContractViewModels.FirstOrDefault();

}
<h4>@ViewData["Title"]</h4>

<div>
    <partial name="StatusMessagePartial" model='Model.StatusMessage'>
</div>
<form asp-action="Index">
    <div class="row form-group">
        <label asp-for="ContractName" class="col-4 col-md-1 col-form-label control-label"> </label>
        <div class="col-4 col-md-3">
            <input asp-for="ContractName" class="form-control" />
            <span asp-validation-for="ContractName" class="text-danger"></span>
        </div>
    </div>
    <div class="row form-group">
        <label asp-for="ContractNo" class="col-4 col-md-1 col-form-label control-label"> </label>
        <div class="col-4 col-md-3">
            <input asp-for="ContractNo" class="form-control" />
            <span asp-validation-for="ContractNo" class="text-danger"></span>
        </div>
    </div>
    <div class="row form-group">
        <div class="checkbox">
            <label asp-for="OnlyMe">
                <input asp-for="OnlyMe" />
                @Html.DisplayNameFor(m => m.OnlyMe)
            </label>
        </div>

    </div>
    <div class="row form-group">
        <div class="col-4 col-md-3">
            <button class="btn btn-primary" type="submit"><i class="fa fa-search"></i> 查询</button>
        </div>
    </div>
</form>
@if (Model.ContractViewModels.Count() != 0)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>
                    序号
                </th>
                <th>
                    @Html.DisplayNameFor(model => headerMetadata.No)
                </th>
                <th>
                    @Html.DisplayNameFor(model => headerMetadata.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => headerMetadata.UserName)
                </th>

                <th>操作</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var item in Model.ContractViewModels)
            {
                <tr>
                    <td>
                        @i
                        @{
                            i++;
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.No)
                    </td>
                    <td title="@item.Name">
                        @* 控制内容显示，过长的内容只显示部分，其余部分用省略号表示 *@
                        @if (item.Name.Length <= 20)
                        {
                            @Html.DisplayFor(modelItem => item.Name)

                        }
                        else
                        {
                            @Html.Raw(item.Name.Substring(0, 20))
                            @Html.Raw("......")

                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.UserName)
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-primary">详细</a>
                        | <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-secondary">编辑</a>
                        | <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger">删除</a>
                    </td>
                </tr>

            }
        </tbody>
    </table>
    if (Model.ContractViewModels != null && Model.ContractViewModels.Any())
    {
        @Html.PagedListPager((IPagedList)Model.ContractViewModels, page => Url.Action("Index", new { page, OnlyMe = Model.OnlyMe, ContractNo = Model.ContractNo, ContractName = Model.ContractName }), new PagedListRenderOptions
{
LinkToFirstPageFormat = "首页",
LinkToNextPageFormat = "下一页",
LinkToPreviousPageFormat = "上一页",
LinkToLastPageFormat = "末页",
MaximumPageNumbersToDisplay = 5,
DisplayItemSliceAndTotal = false,//从头到尾显示页码
UlElementClasses = new[] { "pagination"},  // 为ul li a 元素添加链接，使用ContainerDivClasses = new[] { "pagination" }替换 UlElementClasses = new[] { "pagination"},也是相同的效果。也可以不要此行代码，因为Bootstrap4与3相比，ul的class名没有变化，li 元素和a 元素加了page-item和page-link的类名。
LiElementClasses = new[] { "page-item" },
PageClasses = new[] { "page-link" },

})
    }

}

<a asp-action="Create" class="btn btn-info"><i class="fa fa-plus"></i> 添加合同/项目</a>
